// Generated by data binding compiler. Do not edit!
package com.gevcorst.blackfyre.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.constraintlayout.widget.Guideline;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.gevcorst.blackfyre.R;
import com.google.android.gms.maps.MapView;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class HotSpotBinding extends ViewDataBinding {
  @NonNull
  public final Guideline guidelineBottom;

  @NonNull
  public final Guideline guidelineTop;

  @NonNull
  public final ImageView imageView8;

  @NonNull
  public final MapView mapView;

  @NonNull
  public final TextView textView4;

  @NonNull
  public final TextView textView5;

  @NonNull
  public final SearchView tvHotspotSearch;

  @NonNull
  public final ImageView userImgView;

  protected HotSpotBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Guideline guidelineBottom, Guideline guidelineTop, ImageView imageView8, MapView mapView,
      TextView textView4, TextView textView5, SearchView tvHotspotSearch, ImageView userImgView) {
    super(_bindingComponent, _root, _localFieldCount);
    this.guidelineBottom = guidelineBottom;
    this.guidelineTop = guidelineTop;
    this.imageView8 = imageView8;
    this.mapView = mapView;
    this.textView4 = textView4;
    this.textView5 = textView5;
    this.tvHotspotSearch = tvHotspotSearch;
    this.userImgView = userImgView;
  }

  @NonNull
  public static HotSpotBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.hot_spot, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static HotSpotBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup root,
      boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<HotSpotBinding>inflateInternal(inflater, R.layout.hot_spot, root, attachToRoot, component);
  }

  @NonNull
  public static HotSpotBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.hot_spot, null, false, component)
   */
  @NonNull
  @Deprecated
  public static HotSpotBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<HotSpotBinding>inflateInternal(inflater, R.layout.hot_spot, null, false, component);
  }

  public static HotSpotBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static HotSpotBinding bind(@NonNull View view, @Nullable Object component) {
    return (HotSpotBinding)bind(component, view, R.layout.hot_spot);
  }
}
